import test, { ExecutionContext } from 'ava'

/**
 * Unit under test
 */
import { AwsEndpoint } from '../../src/AwsEndpoint'

const shouldRecognizeAwsEndpoint = (
  t: ExecutionContext,
  region: string
): void => t.true(AwsEndpoint.is(region))

shouldRecognizeAwsEndpoint.title = (_ = '', region: string) =>
  `should recognize aws region ${region}`

const regions = [
  'us-east-2',
  'us-east-1',
  'us-west-1',
  'us-west-2',
  'af-south-1',
  'ap-east-1',
  'ap-south-1',
  'ap-northeast-3',
  'ap-northeast-2',
  'ap-southeast-1',
  'ap-southeast-2',
  'ap-northeast-1',
  'ca-central-1',
  'cn-north-1',
  'cn-northwest-1',
  'eu-central-1',
  'eu-west-1',
  'eu-west-2',
  'eu-south-1',
  'eu-west-3',
  'eu-north-1',
  'me-south-1',
  'sa-east-1',
  'us-gov-east-1',
  'us-gov-west-1',
]

const principals = [
  'a4b.amazonaws.com',
  'acm-pca.amazonaws.com',
  'acm.amazonaws.com',
  'alexa-appkit.amazon.com',
  'alexa-connectedhome.amazon.com',
  'amazonmq.amazonaws.com',
  'apigateway.amazonaws.com',
  'appflow.amazonaws.com',
  'application-autoscaling.amazonaws.com',
  'appstream.application-autoscaling.amazonaws.com',
  'appsync.amazonaws.com',
  'athena.amazonaws.com',
  'autoscaling.amazonaws.com',
  'aws-artifact-account-sync.amazonaws.com',
  'backup.amazonaws.com',
  'batch.amazonaws.com',
  'billingconsole.amazonaws.com',
  'budgets.amazonaws.com',
  'ce.amazonaws.com',
  'channels.lex.amazonaws.com',
  'chime.amazonaws.com',
  'cloud9.amazonaws.com',
  'clouddirectory.amazonaws.com',
  'cloudformation.amazonaws.com',
  'cloudfront.amazonaws.com',
  'cloudhsm.amazonaws.com',
  'cloudsearch.amazonaws.com',
  'cloudtrail.amazonaws.com',
  'cloudwatch-crossaccount.amazonaws.com',
  'codebuild.amazonaws.com',
  'codecommit.amazonaws.com',
  'codedeploy.amazonaws.com',
  'codepipeline.amazonaws.com',
  'codestar.amazonaws.com',
  'cognito-identity.amazonaws.com',
  'cognito-idp.amazonaws.com',
  'cognito-sync.amazonaws.com',
  'config-conforms.amazonaws.com',
  'config-multiaccountsetup.amazonaws.com',
  'config.amazonaws.com',
  'connect.amazonaws.com',
  'continuousexport.discovery.amazonaws.com',
  'custom-resource.application-autoscaling.amazonaws.com',
  'databrew.amazonaws.com',
  'datapipeline.amazonaws.com',
  'dax.amazonaws.com',
  'deeplens.amazonaws.com',
  'delivery.logs.amazonaws.com',
  'diode.amazonaws.com',
  'directconnect.amazonaws.com',
  'discovery.amazonaws.com',
  'dlm.amazonaws.com',
  'dms.amazonaws.com',
  'ds.amazonaws.com',
  'dynamodb.amazonaws.com',
  'dynamodb.application-autoscaling.amazonaws.com',
  'ec.amazonaws.com',
  'ec2.amazonaws.com',
  'ec2.application-autoscaling.amazonaws.com',
  'ec2fleet.amazonaws.com',
  'ec2scheduled.amazonaws.com',
  'ecr.amazonaws.com',
  'ecs-tasks.amazonaws.com',
  'ecs.amazonaws.com',
  'ecs.application-autoscaling.amazonaws.com',
  'edgelambda.amazonaws.com',
  'eks.amazonaws.com',
  'elasticache.amazonaws.com',
  'elasticbeanstalk.amazonaws.com',
  'elasticfilesystem.amazonaws.com',
  'elasticloadbalancing.amazonaws.com',
  'elasticmapreduce.amazonaws.com',
  'elastictranscoder.amazonaws.com',
  'email.cognito-idp.amazonaws.com',
  'es.amazonaws.com',
  'events.amazonaws.com',
  'firehose.amazonaws.com',
  'fms.amazonaws.com',
  'freertos.amazonaws.com',
  'fsx.amazonaws.com',
  'gamelift.amazonaws.com',
  'glacier.amazonaws.com',
  'globalaccelerator.amazonaws.com',
  'glue.amazonaws.com',
  'greengrass.amazonaws.com',
  'guardduty.amazonaws.com',
  'health.amazonaws.com',
  'iam.amazonaws.com',
  'importexport.amazonaws.com',
  'inspector.amazonaws.com',
  'iot.amazonaws.com',
  'iotanalytics.amazonaws.com',
  'iotevents.amazonaws.com',
  'iotsitewise.amazonaws.com',
  'iotthingsgraph.amazonaws.com',
  'jellyfish.amazonaws.com',
  'kafka.amazonaws.com',
  'kinesis.amazonaws.com',
  'kinesisanalytics.amazonaws.com',
  'kms.amazonaws.com',
  'lakeformation.amazonaws.com',
  'lambda.amazonaws.com',
  'lex.amazonaws.com',
  'license-manager.amazonaws.com',
  'lightsail.amazonaws.com',
  'logger.cloudfront.amazonaws.com',
  'logs.amazonaws.com',
  'machinelearning.amazonaws.com',
  'macie.amazonaws.com',
  'managedservices.amazonaws.com',
  'mediaconnect.amazonaws.com',
  'mediaconvert.amazonaws.com',
  'mediapackage.amazonaws.com',
  'mediastore.amazonaws.com',
  'mediatailor.amazonaws.com',
  'member.org.stacksets.cloudformation.amazonaws.com',
  'metering-marketplace.amazonaws.com',
  'migrationhub.amazonaws.com',
  'mobilehub.amazonaws.com',
  'monitoring.amazonaws.com',
  'monitoring.rds.amazonaws.com',
  'ops.apigateway.amazonaws.com',
  'opsworks-cm.amazonaws.com',
  'opsworks.amazonaws.com',
  'organizations.amazonaws.com',
  'pinpoint.amazonaws.com',
  'polly.amazonaws.com',
  'qldb.amazonaws.com',
  'quicksight.amazonaws.com',
  'ram.amazonaws.com',
  'rds.amazonaws.com',
  'redshift.amazonaws.com',
  'rekognition.amazonaws.com',
  'replication.dynamodb.amazonaws.com',
  'replicator.lambda.amazonaws.com',
  'resource-groups.amazonaws.com',
  'robomaker.amazonaws.com',
  'route53.amazonaws.com',
  'route53domains.amazonaws.com',
  'route53resolver.amazonaws.com',
  's3.amazonaws.com',
  'sagemaker.amazonaws.com',
  'secretsmanager.amazonaws.com',
  'securityhub.amazonaws.com',
  'serverlessrepo.amazonaws.com',
  'servicecatalog.amazonaws.com',
  'servicediscovery.amazonaws.com',
  'ses.amazonaws.com',
  'shield.amazonaws.com',
  'signer.amazonaws.com',
  'signin.amazonaws.com',
  'sms.amazonaws.com',
  'sns.amazonaws.com',
  'spotfleet.amazonaws.com',
  'sqs.amazonaws.com',
  'ssm.amazonaws.com',
  'sso.amazonaws.com',
  'states.amazonaws.com',
  'storagegateway.amazonaws.com',
  'sts.amazonaws.com',
  'support.amazonaws.com',
  'swf.amazonaws.com',
  'tagging.amazonaws.com',
  'tagpolicies.tag.amazonaws.com',
  'transcribe.amazonaws.com',
  'transfer.amazonaws.com',
  'translate.amazonaws.com',
  'trustedadvisor.amazonaws.com',
  'tts.amazonaws.com',
  'vmie.amazonaws.com',
  'waf-regional.amazonaws.com',
  'waf.amazonaws.com',
  'workdocs.amazonaws.com',
  'worklink.amazonaws.com',
  'workmail.amazonaws.com',
  'workspaces.amazonaws.com',
  'xray.amazonaws.com',
]

regions.forEach(region =>
  principals.forEach(principal => {
    test(
      shouldRecognizeAwsEndpoint,
      `http://${principal}.${region}.amazonaws.com`
    )
    test(
      shouldRecognizeAwsEndpoint,
      `https://${principal}.${region}.amazonaws.com`
    )
    test(
      shouldRecognizeAwsEndpoint,
      `http://${principal}.${region}.amazonaws.com/`
    )
    test(
      shouldRecognizeAwsEndpoint,
      `https://${principal}.${region}.amazonaws.com/`
    )
  })
)
